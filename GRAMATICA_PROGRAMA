*********************************************************************
Gramática de contexto libre sencilla para un lenguaje de programación
funcional.
*********************************************************************
Los elementos entre <> son simbolos no terminales, los elementos
en MAYUSCULAS son simbolos terminales o "tokens".
*********************************************************************

#Elementos básicos de un programa
<programa> -> <principal><funciones> | <principal>
<principal -> VOID MAIN(VOID){<lineas_de_codigo>}
#Instrucciones
<lineas_de_codigo> -> <linea_de_codigo> | /*vacio*/
<linea_de_codigo> -> <linea_de_codigo><linea> | <linea>
<linea> -> <invocar_metodo>; | <crear_variable>; | <cambiar_valor>; | <ciclo_condición>
#METODOS
<invocar_metodo> -> IDENTIFICADOR(<parametros>)
<parametros> -> <parametro> | /*vacio*/
<parametro> -> <parametro>,<variables> | <variables>
#Variables
<variables> -> <variable> | IDENTIFICADOR
<variable> -> ENTERO | FLOTANTE | DOBLE | CARACTER | BOOLEANO
<crear_variable> -> <tipo_de_dato> IDENTIFICADOR | <tipo_de_dato> IDENTIFICADOR <asignar_valor>
<tipo_de_dato> -> T_ENTERO | T_FLOTANTE | T_DOBLE | T_CARACTER | T_BOOLEANO 
#Operaciones
<asignar_valor> -> ASIGNADOR <asignacion> | ASIGNADOR <variable> | ASIGNADOR IDENTIFICADOR 
<asignacion> -> <aritmetico> | <invocametodo> | <inc_dec_variable>
<aritmetico> -> <operacion_comun> | <operacion_comun><operacion_complemento>
<operacion_comun> -> <variable><operador><variable> | <variable><operador> IDENTIFICADOR | IDENTIFICADOR <operador><variable> | IDENTIFICADOR <operador> IDENTIFICADOR
<operador> -> SUMA | RESTA | MULTIPLICACION | DIVISION
<operacion_complemento> -> <operacion_complemento><operacion_añadida> | <operacion_añadida>
<operacion_añadida> -> <operador><variable> | <operador> IDENTIFICADOR
<inc_dec_variable> -> IDENTIFICADOR <inc_dec>
<inc_dec> -> INCREMENTO | DECREMENTO
<cambiar_valor> -> IDENTIFICADOR ASIGNADOR <valor>
<valor> -> <variable> | <asignacion> | IDENTIFICADOR
<logica> -> MAYOR | MENOR | IGUAL | MAYORIGUAL | MENORIGUAL | DISTINTO
#Ciclos y condicionales
<ciclo_condicion> -> <condicional_if> | <ciclo_for> | <ciclo_while>
<condicion> -> <variable><logica><variable> | <variable><logica>IDENTIFICADOR | IDENTIFICADOR <logica><variable> | IDENTIFICADOR <logica> IDENTIFICADOR
#IF
<condicional_if> -> <condicion_si> | <condicion_si><condicion_no> | <condicion_si><anidados><condicion_no>
<condicion_si> -> IF(<condicion>){<lineas_de_codigo>}
<condicion_no> ->ELSE{<lineas_de_codigo>}
<anidados> -> <anidados><si_no> | <si_no>
<si_no> ->ELSE IF(<condicion>){<lineas_de_codigo>}
#FOR
<ciclo_for> -> FOR(<inicio_for>;<condicion>;<inc_dec_variable>){<lineas_de_codigo>}
<inicio_for> -> <tipo_de_dato> IDENTIFICADOR <asignar_valor>
#WHILE
<ciclo_while> -> WHILE(<condicion>){<lineas_de_codigo>}
#funciones
<funciones> -> <funciones><funcion> | <funcion>
<funcion> -> <tipo_de_retorno> IDENTIFICADOR (<parametros_entrada>){<lineas_de_codigo>}
<tipo_de_retorno> -> <tipo_de_dato> | VOID
<parametros_entrada> -> <parametros_def> | /*vacio*/
<parametros_def> -> <parametros_def>,<tipo_de_dato>IDENTIFICADOR | <tipo_de_dato> IDENTIFICADOR 
